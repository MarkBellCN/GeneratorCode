/**
* @Author: GenCode
* @Description:代码生成器生成
*/

package ${packageName};

import com.alibaba.fastjson.JSON;
import com.github.pagehelper.Page;
import com.ytkj.http.ReqParams;
import com.ytkj.http.Result;
import ${basePackage}.${genProp.servicePackageName}.${className}Service;
import ${basePackage}.${genProp.modelPackageName}.${className};
import com.ytkj.util.SqlUtil;
import com.ytkj.util.YtkjExcelUtils;
import io.swagger.annotations.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletResponse;
import java.io.OutputStream;
import java.util.List;

@Api(tags = {"${className}"}, description = "${className}")
@RestController
@RequestMapping(value = "/${classNickName}", method = RequestMethod.POST)
public class ${className}Controller {

    @Autowired
    private ${className}Service ${classNickName}Service;

    @ApiOperation(value = "获取分页数据")
    @RequestMapping("/pageQuery")
    public Result pageQuery(@RequestBody ReqParams<${className}> params){
        ${className} ${classNickName}= JSON.parseObject(JSON.toJSONString(params.getData()),${className}.class);
        String orderBy = SqlUtil.getSortMapToStr(${classNickName},params.getSortMap(),null);
        Page<${className}> page = ${classNickName}Service.pageQueryLike(${classNickName},params.getPageNum(),params.getPageSize(),orderBy);
        return Result.success(page);
    }

    @ApiOperation(value = "添加数据")
    @RequestMapping("/save")
    public Result save(@RequestBody ${className} ${classNickName}){

        ${classNickName}Service.save(${classNickName});
        return Result.success(${classNickName});
    }

    @ApiOperation(value = "删除数据")
        @ApiImplicitParams({
            @ApiImplicitParam(name="ids",value="要删除数据的编号",dataType="string", paramType = "string",example="[1,2]")
    })
    @RequestMapping("/delete")
    public Result delete(@RequestBody List<String> ids){
        if(ids!=null&&ids.size()>0){
            ${classNickName}Service.delete${className}(ids);
        }
        return Result.success();
    }

    @ApiOperation(value = "修改数据")
    @RequestMapping("/update")
    public Result update(@RequestBody ${className} ${classNickName}) {

        ${classNickName}Service.update(${classNickName});
        return Result.success();
    }

    @ApiOperation(value = "查询所有数据")
    @RequestMapping("/queryAll")
    public Result queryList(@RequestBody ${className} ${classNickName}){
    List<${className}> list = ${classNickName}Service.queryAll(${classNickName});
        return Result.success(list);
    }

    @ApiOperation(value = "根据编号查询该数据的详细信息")
        @ApiImplicitParams({
            @ApiImplicitParam(name="id",value="要查询数据的编号",dataType="string", paramType = "body",example="1")
    })
    @RequestMapping("/detail")
    public Result queryDetail(@RequestBody String id){
        ${className} ${classNickName} = ${classNickName}Service.queryById(id);
        return Result.success(${classNickName});
    }

    @ApiOperation(value = "导出Excel数据")
    @RequestMapping("/exportExcel")
    public void exportExcel(HttpServletResponse response, @RequestBody ReqParams<${className}> params){
        List<${className}> list = null;
        if(params.getPageNum()==0){
            list = ${classNickName}Service.queryAll(new ${className}());
        }else {
            Page<${className}> page = ${classNickName}Service.pageQuery(params.getData(),params.getPageNum(),params.getPageSize(),"${className}_no");
                list = page.getResult();
        }
        try {
            long fileName = System.currentTimeMillis();
            response.setHeader("Content-disposition", "attachment; filename=" + fileName+ ".xlsx");
            OutputStream outputStream = response.getOutputStream();
            YtkjExcelUtils.getInstance().export(list,params.getHeaderEn(),${className}.class,outputStream);
            outputStream.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
